<?xml version="1.0" encoding="UTF-8"?>
<project name="Babelium standalone player" basedir="." default="deploy-player">

    <!-- build property file -->
	<property file="build.properties" />
	
    <!-- flextasks definition -->
	<taskdef resource="flexTasks.tasks" classpath="${FLEXTASKS_FILE}" />
	
    <!-- git macro -->
    <macrodef name="git">
        <attribute name="command" />
        <attribute name="dir" default="" />
        <element name="args" optional="yes"/>
        <sequential>
            <echo message="git @{command}" />
            <exec executable="git" dir="@{dir}">
                <arg value="@{command}" />
                <args />
            </exec>
        </sequential>
    </macrodef>

    <target name="clean">
        <!-- remove the component repository directory -->
        <delete dir="${COMPONENT_DIR}" failOnError="false" includeEmptyDirs="true" />
        <delete dir="${RELEASE_DIR}" failOnError="false" includeEmptyDirs="true" />
    </target>

    <!-- clones the specified git repository and branch -->
    <target name="fetch-library" depends="clean">
        <git command="clone">
            <args>
                <arg value="${COMPONENT_REPOSITORY}" />
                <arg value="${COMPONENT_DIR}" />
            </args>
        </git>
        <git dir="${COMPONENT_DIR}" command="checkout">
            <args>
                <arg value="${COMPONENT_BRANCH}"/>
            </args>
        </git>
    </target>

    <target name="build-library" depends="fetch-library">
         <compc output="${COMPONENT_DIR}/release/player-component.swc"
                debug="${DEBUG_BUILD}"
                accessible="${ACCESSIBLE_BUILD}">
            <load-config filename="${FLEX_HOME}/frameworks/flex-config.xml" />
            <source-path path-element="${COMPONENT_DIR}/src" />
            <include-sources dir="${COMPONENT_DIR}/src" includes="*" />
            <!-- include additional third-party libraries-->
            <compiler.library-path dir="${COMPONENT_DIR}" append="true">
                <include name="libs" />
            </compiler.library-path>
            <!-- exclude the framework files that belong to spark -->
            <compiler.external-library-path dir="${FLEX_HOME}/frameworks/libs" append="true">
                <include name="player/11.1/playerglobal.swc" />
                <include name="framework.swc" />
                <include name="textLayout.swc" />
                <include name="spark.swc" />
                <include name="sparkskins.swc" />
                <include name="rpc.swc" />
                <include name="charts.swc" />
                <include name="osmf.swc" />
            </compiler.external-library-path>
        </compc>
    </target>

	<target name="build-player" depends="build-library">
		<mxmlc file="${basedir}/src/babeliumPlayer.mxml" 
			   output="${RELEASE_DIR}/babeliumPlayer.swf"
			   locale="${LOCALE_BUNDLES}"
               debug="${DEBUG_BUILD}"
               accessible="${ACCESSIBLE_BUILD}">
			
			<load-config filename="${FLEX_HOME}/frameworks/flex-config.xml" />
			
			<compiler.library-path dir="${basedir}" append="true">
				<include name="libs"/>
			</compiler.library-path>
			<compiler.library-path dir="${COMPONENT_DIR}" append="true">
                <include name="release/player-component.swc"/>
            </compiler.library-path>
			
			<source-path path-element="${basedir}/src"/>
			<source-path path-element="${basedir}/locale/{locale}"/>
			
			<load-config filename="${CONFIGFILE_BUILD}" />
		</mxmlc>
	</target>

	<target name="copy-html-template" >
		<copy todir="${basedir}/html-template" overwrite="true">
			<fileset dir="${FLEX_HOME}/templates/swfobject" />
		</copy>
	</target>

	<target name="generate-html-wrapper" depends="copy-html-template">
		<html-wrapper title="Babelium standalone player" 
					  file="babeliumPlayer.html" 
					  bgcolor="#000000" 
		 			  height="640" 
					  width="360" 
					  application="babeliumPlayer" 
					  swf="babeliumPlayer" 
					  history="false" 
					  version-detection="true" 
					  express-install="true" 
					  output="${RELEASE_DIR}" />
	</target>
	
	<target name="copy-player-skins">
		<copy todir="${RELEASE_DIR}/resources/skin" overwrite="true">
			<fileset dir="${basedir}/src/resources/skin" />
		</copy>
	</target>

    <!-- build the player and copy all the additional requirements -->
    <target name="deploy-player" depends="build-player,generate-html-wrapper,copy-player-skins">
        <copy todir="${RELEASE_DIR}/resources/skin" overwrite="true">
            <fileset dir="${basedir}/src/resources/skin" />
        </copy>
        <copy file="${basedir}/src/resources/crossdomain.xml" todir="${RELEASE_DIR}" overwrite="true" />
        <replaceregexp file="${RELEASE_DIR}/crossdomain.xml"
                       match="allow-access-from domain=&quot;[^&quot;]+&quot;"
                       replace="allow-access-from domain=&quot;*&quot;"/>
	
    </target>
	
</project>
