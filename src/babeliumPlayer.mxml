<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:videoPlayer="modules.videoPlayer.*"
			   xmlns:control="control.*"
			   preinitialize="init()"
			   creationComplete="complete()">
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Metadata>
		[ResourceBundle("myResources")]
	</fx:Metadata> 
	
	<fx:Style source="babeliumPlayer.css"/>
	
	<fx:Declarations>
		<control:Extern/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import model.ConnectionManager;
			
			import modules.videoPlayer.events.VideoPlayerEvent;
			import modules.videoPlayer.events.babelia.RecordingEvent;
			import modules.videoPlayer.events.babelia.StreamEvent;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.resources.Locale;
			import mx.resources.ResourceManager;
			import mx.utils.ObjectUtil;
			
			import org.as3commons.logging.api.LOGGER_FACTORY;
			import org.as3commons.logging.setup.LevelTargetSetup;
			import org.as3commons.logging.setup.LogSetupLevel;
			import org.as3commons.logging.setup.target.FirebugTarget;
			
			//LOGGER_FACTORY.setup = new LevelTargetSetup( new FirebugTarget, LogSetupLevel.DEBUG );
			LOGGER_FACTORY.setup = new LevelTargetSetup( new FirebugTarget, LogSetupLevel.INFO );
			
			private var videoId:String;
			private var explicit_locale:String;
			private var forceRTMPT:Boolean;
			
			[Bindable] private var app:Object = FlexGlobals.topLevelApplication;
			
			[Bindable] private var appWidth:uint;
			[Bindable] private var appHeight:uint;
			
			private function init():void
			{
				//http://stackoverflow.com/questions/452415/how-to-make-cross-domain-communication-between-javascript-and-flash
				Security.allowDomain("*");
				
				var tla:Object = FlexGlobals.topLevelApplication;
				
				appWidth=tla.width;
				appHeight=tla.height;
				videoId=tla.parameters.videoId;
				
				forceRTMPT = tla.parameters.hasOwnProperty('forcertmpt') ? Boolean(parseInt(tla.parameters.forcertmpt)) : false;
				ConnectionManager.getInstance().encapsulateRTMP=forceRTMPT;

				explicit_locale=tla.parameters.locale;
				explicit_locale=parseLocale(explicit_locale);
				if(explicit_locale){
					ResourceManager.getInstance().localeChain=[explicit_locale];
				}
			}
			
			private function complete():void
			{
				
				VP.addEventListener(StreamEvent.ENTER_FRAME, onEnterFrame);
				VP.addEventListener(RecordingEvent.ABORTED, onRecordingAborted);
				VP.addEventListener(RecordingEvent.END, onRecordingFinished);
				VP.addEventListener(VideoPlayerEvent.VIDEO_STARTED_PLAYING, onVideoStartedPlaying);
				VP.addEventListener(VideoPlayerEvent.METADATA_RETRIEVED, onMetadataRetrieved);
				VP.addEventListener(VideoPlayerEvent.CONNECTED, onConnectionReady);
				
				//VP.stopVideo();
				//VP.state=VideoPlayerBabelia.PLAY_STATE;
				
				if (videoId != null)
					VP.videoSource=ConnectionManager.getInstance().exerciseStreamsFolder + "/" + videoId;
			
				// Setups javascripts external controls
				Extern.getInstance().setup(VP);	
			}
			
			private function parseLocale(locale:String):String{
				var parsed_locale:String=null;
				var language:String=null;
				var country:String=null;
				var available_languages:Array;
				if(locale){
					available_languages = ResourceManager.getInstance().getLocales();
					var parts:Array = locale.split("_");
					if (parts.length > 0){
						language = parts[0];
						if (parts.length > 1)
							country = (parts[1] as String).toUpperCase();
						for each (var l:String in available_languages){
							var lparts:Array = l.split("_");
							if(country){
								if(lparts[0] == language && lparts[1] == country){
									parsed_locale = l;
									break;
								}
							} else{
								if(lparts[0] == language){
									parsed_locale = l;
									break;
								}
							}
						}
					}	
				}
				return parsed_locale;
			}
			
			
			
			private function set onUpdateVPHeight(height:int):void
			{
				trace("VP Height: "+VP.height);
				Extern.getInstance().resizeHeight(height);
			}
			
			private function set onUpdateVPWidth(width:int):void
			{
				trace("VP Width: "+VP.width);
				Extern.getInstance().resizeWidth(width);
			}
			
			/**
			 * TEMP
			 * The following code is a Q&D hack to expose the functions of the API to AS3 parents. In later
			 * versions should consider a dynamic main class in which API is added dynamically
			 */
			public function exerciseSource(exerciseId:String):void
			{
				if(exerciseId != null) VP.videoSource = ConnectionManager.getInstance().exerciseStreamsFolder + "/" + exerciseId;
			}
			
			public function responseSource(responseId:String):void{
				if(responseId != null) VP.videoSource = ConnectionManager.getInstance().responseStreamsFolder + "/" + responseId;
			}
			
			public function secondSource(videoId:String):void
			{
				if(videoId != null) VP.secondSource = ConnectionManager.getInstance().responseStreamsFolder + "/" + videoId;
			}
			
			public function playVideo():void{
				VP.playVideo();
			}
			
			public function pauseVideo():void{
				VP.pauseVideo();
			}
			
			public function resumeVideo():void{
				VP.resumeVideo();
			}
			
			public function stopVideo():void{
				VP.stopVideo();
			}
			
			public function seekTo(time:Number):void{
				VP.seekTo(time);
			}
			
			public function endVideo():void{
				VP.endVideo();
			}
			
			public function muteVideo(mute:Boolean):void{
				VP.muteVideo(mute);
			}
			
			public function muteRecording(mute:Boolean):void{
				VP.muteRecording(mute);
			}
			
			public function setArrows(arrowTimestamps:Array, roleId:String):void{
				var aux:ArrayCollection = new ArrayCollection(arrowTimestamps);
				VP.setArrows(aux, roleId);
			}
			
			public function removeArrows():void{
				VP.removeArrows();
			}
			
			public function setSubtitle(text:String, color:Number):void{
				VP.setSubtitle(text,color);
			}
			
			public function startTalking(roleId:String, duration:Number):void{
				VP.startTalking(roleId, duration);
			}
			
			public function unattachUserDevices():void{
				VP.unattachUserDevices();
			}
			
			public function duration():Number{
				return VP.duration;
			}
			
			public function streamTime():Number{
				return VP.streamTime;
			}
			
			public function getState():Number{
				return VP.state;
			}
			
			public function setState(newState:Number):void{
				VP.state = newState;
			}
			
			public function arrows(displayArrows:Boolean):void{
				VP.arrows = displayArrows;
			}
			
			public function autoScale(autoscaleVideo:Boolean):void{
				VP.autoScale = autoscaleVideo;
			}
			
			public function disableControls():void{
				VP.disableControls();
			}
			
			public function enableControls():void{
				VP.enableControls();
			}
			
			public function toggleControls():void{
				VP.toggleControls();
			}
			
			public function seek(enableSeek:Boolean):void{
				VP.seek=enableSeek;
			}
			
			public function skinFile(skinFileUrl:String):void{
				VP.skin=skinFileUrl;
			}
			
			public function subtitles(displaySubtitles:Boolean):void{
				VP.subtitles=displaySubtitles;
			}
			
			public function highlight(displayRoleHighlight:Boolean):void{
				VP.highlight=displayRoleHighlight;
			}
			
			protected function onEnterFrame(event:StreamEvent):void{
				this.dispatchEvent(event);
			}
			
			protected function onRecordingAborted(event:RecordingEvent):void{
				this.dispatchEvent(event);
			}
			
			protected function onRecordingFinished(event:RecordingEvent):void{
				this.dispatchEvent(event);
			}
			
			protected function onVideoStartedPlaying(event:VideoPlayerEvent):void{
				this.dispatchEvent(event);
			}
			
			protected function onMetadataRetrieved(event:Event):void{
				this.dispatchEvent(event);
			}
			
			private function onConnectionReady(event:Event):void
			{
				this.dispatchEvent(event);
				Extern.getInstance().onConnectionReady();
			}
			
			public function setSize(width:Number, height:Number):void{
				if(!isNaN(width) && width > 0 && !isNaN(height) && height > 0){
					if (VP.width !== width) VP.width = width;
					if (VP.height !== height) VP.height = height;
				}
			}	
			/**
			 * /TEMP
			 */
			
		]]>
	</fx:Script>
	<fx:Binding source="{VP.height}"
				destination="this.onUpdateVPHeight"/>
	<fx:Binding source="{VP.width}"
				destination="this.onUpdateVPWidth"/>

	<videoPlayer:VideoPlayerBabelia id="VP"
									autoPlay="true"
									skin="white"
									seek="true"
									subtitles="true"
									autoScale="false"
									arrows="false"
									width="{appWidth}"
									height="{appHeight-20}"
									subtitlingControls="false"
									streamSource="Yes"
									controlsEnabled="true"/>
</s:Application>
