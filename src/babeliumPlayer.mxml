<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:player="com.babeliumproject.player.*"
			   xmlns:control="control.*"
			   preinitialize="init()"
			   creationComplete="completeHandler(event)">

	<s:layout>
		<s:BasicLayout/>
	</s:layout>

	<fx:Metadata>
		[ResourceBundle("PlayerResources")]
	</fx:Metadata>

	<fx:Style source="babeliumPlayer.css"/>

	<fx:Declarations>
		<control:Extern/>
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import com.babeliumproject.player.events.VideoPlayerEvent;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColor;
			import mx.resources.Locale;
			import mx.resources.ResourceManager;
			import mx.utils.ObjectUtil;
			
			import org.as3commons.logging.api.LOGGER_FACTORY;
			import org.as3commons.logging.setup.LevelTargetSetup;
			import org.as3commons.logging.setup.LogSetupLevel;
			import org.as3commons.logging.setup.log4j.log4jPropertiesToSetup;
			import org.as3commons.logging.setup.target.FirebugTarget;
			
			import spark.primitives.Graphic;
			import spark.primitives.Path;
			import spark.primitives.Rect;
			
			import utils.LocaleUtils;

			private var mediaData:Object;
			private var explicit_locale:String;

			[Bindable]
			private var app:Object=FlexGlobals.topLevelApplication;

			[Bindable]
			private var appWidth:uint;
			[Bindable]
			private var appHeight:uint;

			private function init():void
			{
				//http://stackoverflow.com/questions/452415/how-to-make-cross-domain-communication-between-javascript-and-flash
				Security.allowDomain("*");

				var tla:Object=FlexGlobals.topLevelApplication;

				appWidth=tla.width;
				appHeight=tla.height;
				mediaData=tla.parameters.mediaData;

				explicit_locale=tla.parameters.locale;
				explicit_locale=LocaleUtils.parseLocale(explicit_locale);
				if (explicit_locale)
				{
					LocaleUtils.arrangeLocaleChain(explicit_locale);
				}
			}

			private function completeHandler(event:FlexEvent):void
			{
				loadLoggingConfig('logging.properties');
				if (mediaData){
					player.loadVideoByUrl(mediaData);
				}

				//Initialize the external interface with the player's reference
				Extern.getInstance().setup(player);
				
				//Tell JS listeners the player was successfully initialized
				Extern.getInstance().onVideoPlayerInitialized();
			}
			
			private function loadLoggingConfig(url:String):void{
				var loader:URLLoader = new URLLoader();
				loader.addEventListener(Event.COMPLETE, parseLoggingConfig);
				loader.addEventListener(IOErrorEvent.IO_ERROR, urlNotAvailable);
				loader.load(new URLRequest(url));
			}
			
			private function parseLoggingConfig(event:Event):void{
				LOGGER_FACTORY.setup = log4jPropertiesToSetup(event.target.data);
			}
			
			private function urlNotAvailable(e:IOErrorEvent):void{
				trace("Couldn't load the specified resource from the url. "+e.text);
			}


			private function set onUpdateVPHeight(height:int):void
			{
				trace("VP Height: " + player.height);
				Extern.getInstance().resizeHeight(height);
			}

			private function set onUpdateVPWidth(width:int):void
			{
				trace("VP Width: " + player.width);
				Extern.getInstance().resizeWidth(width);
			}
		]]>
	</fx:Script>
	<fx:Binding source="{player.height}"
				destination="this.onUpdateVPHeight"/>
	<fx:Binding source="{player.width}"
				destination="this.onUpdateVPWidth"/>

	<player:VideoRecorder id="player"
						  autoPlay="true"
						  skinUrl="resources/skin/white.xml"
						  seekUsingScrubber="true"
						  displayCaptions="true"
						  autoScale="false"
						  width="{appWidth}"
						  height="{appHeight-20}"
						  subtitlingControls="false"
						  controlsEnabled="true"/>
</s:Application>
